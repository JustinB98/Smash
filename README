Justin Behrman

./
├── src/
│   ├── task.c
│   ├── smash_commands.c
│   ├── signal_handlers.c
│   ├── queue.c
│   ├── pipeline.c
│   ├── parser.c
│   ├── metadata.c
│   ├── main.c
│   ├── linked_list.c
│   ├── job_table.c
│   ├── job.c
│   ├── input.c
│   ├── hashtable.c
│   ├── foreground_job.c
│   ├── exit_code.c
│   ├── debug.c
│   └── args.c
├── shell_tests/
│   ├── reg_tests/
│   │   ├── test04.sh
│   │   ├── test03.sh
│   │   ├── test02.sh
│   │   └── test01.sh
│   ├── finish.sh
│   ├── ec_tests/
│   │   ├── test06.sh
│   │   └── test05.sh
│   ├── assert_unsuccessful_exit.sh
│   ├── assert_successful_exit.sh
│   └── assert_exit_code.sh
├── include/
│   ├── task.h
│   ├── smash_commands.h
│   ├── signal_handlers.h
│   ├── queue.h
│   ├── pipeline.h
│   ├── parser.h
│   ├── metadata.h
│   ├── linked_list.h
│   ├── job_table.h
│   ├── job.h
│   ├── input.h
│   ├── hashtable.h
│   ├── foreground_job.h
│   ├── exit_code.h
│   ├── debug.h
│   └── args.h
├── README
└── Makefile

# File Structure
## src
* task.c - Accessors for the Task struct
* smash_commands.c - Functions that deal with builtin commands
* signal_handlers.c - Module that sets up signal handlers and maintains flags, as well as having a function that reap children processes and attempts to update them in the job table
* queue.c - Priority queue that is built on top of a linked list in order to maintain job numbers
* pipeline.c - Functions that deal with the Pipeline struct
* parser.c - Module that contains a parse function to parse user input and will return a pipeline struct
* metadata.c - Module that contains smash's original pid as well as if it's running in interactive mode. Must be initialized.
* main.c - Contains main function that initializes smash as well as the loop that continuously reads input from the input file
* linked_list.c - Basic implementation of a doubly linked list with an int as a key (to hold a job id and process id)
* job_table.c - Function for inserting jobs into the table as well as updating their status (Only used for background jobs)
* job.c - Starting a job with fork and waiting for it if it's in the background
* input.c - Waits for user input using pselect(2) and getline(3) to ensure no job is a zombie for too long
* hashtable.c - Basic hashtable implementation that uses a linked list to deal with collisions
* foreground_job.c - Handles foreground jobs as well as reaping them or detecting if they're stopped and put in the background
* exit_code.c - Keeps track of the exit code for the last foreground process
* debug.c - For printing debug messages
* args.c - For processing command line arguments and exiting if there are any invalid arguments

## include
* task.h - Contains the task structure
* smash_commands.h - Functionst that deal with builtin commands
* signal_handlers.h - Holds the flags of any signal being handled (SIGINT, SIGTSTP and SIGCHLD) and keeps the flags global
* queue.h - Contains the queue structure
* pipeline.h - Contains the pipeline structure
* parser.h - Module that contains a parse function to parse user input and will return a pipeline struct
* metadata.h - Contains functions for getting smash's pid or seeing if smash is in interactive mode
* linked_list.h - Contains the linked list struct
* job_table.h - Contains the functions on accessing the job table
* job.h - Contains the function to start the pipeline
* input.h - Waits for user input using pselect(2) and getline(3) to ensure no job is a zombie for too long
* hashtable.h - Basic hashtable implementation that uses a linked list to deal with collisions
* foreground_job.h - Handles foreground jobs as well as reaping them or detecting if they're stopped and put in the background
* exit_code.h - Contains functions to set the exit code or to set it to EXIT_SUCESSS or EXIT_FAILURE
* debug.h - For printing debug messages
* args.h - Contains the function to starting process the command line args and accessors for flags passed

## shell_tests
* reg_tests/ - Tests for running the regular program
  * test01.sh - Testing smash's builtin commands
  * test02.sh - General Tests with smash such as using ls and wc
  * test03.sh - Testing command line arguments
  * test04.sh - Testing file redirection with smash
* ec_tests/ - Tests for running the extra credit program
  * test05.sh - Piping Tests
  * test06.sh - Globbing Tests
* finish.sh - Prints the results of the test
* assert_unsuccessful_exit.sh - Asserts that the given exit code is equal to the last command's exit code
* assert_successful_exit.sh - Asserts the last command was successful (exit code == 0)
* assert_unsuccessful_exit.sh - Asserts the last command was unsuccessful (exit code != 0)

# Makefile

